1. Extract the Incoming Trace Context
When a microservice receives an HTTP request, it extracts the trace context (traceparent and tracestate headers) from the request.

Example (Java with OpenTelemetry API):
java

import io.opentelemetry.context.propagation.TextMapGetter;
import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Context;
import io.opentelemetry.api.GlobalOpenTelemetry;

// Define a getter to extract trace headers
TextMapGetter<HttpHeaders> getter = new TextMapGetter<>() {
    @Override
    public Iterable<String> keys(HttpHeaders carrier) {
        return carrier.names();
    }

    @Override
    public String get(HttpHeaders carrier, String key) {
        return carrier.getHeaderString(key);
    }
};

// Extract context from incoming headers
Context extractedContext = GlobalOpenTelemetry.getPropagators()
    .getTextMapPropagator()
    .extract(Context.current(), request.getHeaders(), getter);
request.getHeaders() refers to the HTTP headers in the incoming request.

The extract method retrieves the Trace ID and Parent Span ID from the traceparent header.



2. Create a New Span Using the Extracted Context
Use the extracted context to create a new span that continues the trace.

Example:
java

Tracer tracer = GlobalOpenTelemetry.getTracer("example-service");

// Start a new span using the extracted context
Span newSpan = tracer.spanBuilder("outgoing-http-call")
    .setParent(extractedContext)  // Link the new span to the extracted context
    .startSpan();

try (Scope scope = newSpan.makeCurrent()) {
    // Perform operations in the context of this span
    // e.g., make an HTTP call to another service
    callAnotherService();
} 
finally {
    newSpan.end();  // End the span
}


3. Inject the Trace Context for the Next HTTP Call
Before making an HTTP call to another microservice, inject the updated trace context into the outgoing request.

Example:
java
Copy code
import io.opentelemetry.context.propagation.TextMapSetter;

// Define a setter to inject trace headers
TextMapSetter<HttpRequest> setter = new TextMapSetter<>() {
    @Override
    public void set(HttpRequest carrier, String key, String value) {
        carrier.setHeader(key, value);
    }
};

// Inject context into outgoing headers
HttpRequest outgoingRequest = new HttpRequest();  // Your HTTP request object
GlobalOpenTelemetry.getPropagators()
    .getTextMapPropagator()
    .inject(Context.current(), outgoingRequest, setter);

// Send the request to the next service
httpClient.send(outgoingRequest);
The inject method adds the updated traceparent and tracestate headers to the outgoing request.


4. Full Workflow
Incoming Request:
Extract trace context (traceparent and tracestate) from the incoming HTTP headers.
Create a new span linked to the extracted trace context.
Outgoing Request:
Inject the trace context into the HTTP headers of the outgoing request.
Make the HTTP call.


5. Example with HTTP Client (Undertow or Others)
Using Undertow HTTP/2 Client:
java
Copy code
import io.opentelemetry.context.propagation.TextMapSetter;

Http2Client client = Http2Client.getInstance();
HttpRequest request = new HttpRequest("http://next-service/api");

TextMapSetter<HttpRequest> undertowSetter = (carrier, key, value) -> carrier.putHeader(key, value);

// Inject trace headers into the request
GlobalOpenTelemetry.getPropagators()
    .getTextMapPropagator()
    .inject(Context.current(), request, undertowSetter);

// Send the request
client.send(request);


6. Example Using Spring Boot (Optional)
If you're using Spring Boot, the OpenTelemetry instrumentation automatically handles this process:

Add the OpenTelemetry Java agent to your application.
Use a library like opentelemetry-instrumentation-spring to automatically propagate trace headers for incoming and outgoing HTTP requests.
7. Observing Traces in Backend
Once the trace context is passed successfully, all spans from different microservices will share the same Trace ID and appear as part of the same trace in your backend (e.g., Jaeger).

Would you like to implement this for a specific HTTP client or framework?






